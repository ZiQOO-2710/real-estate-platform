import React, { useState } from 'react';
import {
  Box,
  TextField,
  Autocomplete,
  Paper,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Chip,
  InputAdornment,
  Divider
} from '@mui/material';
import {
  ExpandMore as ExpandMoreIcon,
  Search as SearchIcon,
  LocationOn as LocationIcon,
  MyLocation as MyLocationIcon
} from '@mui/icons-material';
import { regionsData, getAllRegions, searchRegions } from '../data/regions';

const RegionTreeSelect = ({ 
  value = '', 
  onChange, 
  placeholder = "ÏßÄÏó≠ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
  showSearch = true,
  maxHeight = 400 
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedProvinces, setExpandedProvinces] = useState(new Set(['ÏÑúÏö∏ÌäπÎ≥ÑÏãú'])); // ÏÑúÏö∏ÏùÄ Í∏∞Î≥∏ÏúºÎ°ú Ïó¥Ïñ¥Îë†
  const [isOpen, setIsOpen] = useState(false);

  // Î™®Îì† ÏßÄÏó≠ÏùÑ ÌîåÎû´ Î∞∞Ïó¥Î°ú Î≥ÄÌôò (Í≤ÄÏÉâÏö©)
  const allRegions = getAllRegions();

  // Í≤ÄÏÉâ Í≤∞Í≥º
  const searchResults = searchTerm ? searchRegions(searchTerm) : [];

  // ÏïÑÏΩîÎîîÏñ∏ ÌÜ†Í∏Ä
  const handleAccordionToggle = (provinceName) => {
    const newExpanded = new Set(expandedProvinces);
    if (newExpanded.has(provinceName)) {
      newExpanded.delete(provinceName);
    } else {
      newExpanded.add(provinceName);
    }
    setExpandedProvinces(newExpanded);
  };

  // ÏßÄÏó≠ ÏÑ†ÌÉù Ìï∏Îì§Îü¨
  const handleRegionSelect = (regionName, regionCoords = null) => {
    onChange(regionName, regionCoords);
    setIsOpen(false);
    setSearchTerm('');
  };

  // Í≤ÄÏÉâÏñ¥ Î≥ÄÍ≤Ω
  const handleSearchChange = (event, newValue) => {
    setSearchTerm(newValue);
  };

  // Í≤ÄÏÉâ Í≤∞Í≥ºÏóêÏÑú ÏÑ†ÌÉù
  const handleSearchSelect = (event, selectedOption) => {
    if (selectedOption) {
      handleRegionSelect(selectedOption.name, selectedOption.coords);
    }
  };

  // Ïãú/ÎèÑÎ≥Ñ ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò
  const getProvinceIcon = (type) => {
    switch (type) {
      case 'metropolitan': return 'üèôÔ∏è';
      case 'special': return 'üèõÔ∏è';
      case 'province': return 'üåÑ';
      default: return 'üìç';
    }
  };

  // Ïãú/Íµ∞/Íµ¨Î≥Ñ ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò
  const getCityIcon = (type) => {
    switch (type) {
      case 'district': return 'üè¢';
      case 'city': return 'üèòÔ∏è';
      case 'county': return 'üåæ';
      default: return 'üìç';
    }
  };

  return (
    <Box sx={{ position: 'relative' }}>
      {/* Í≤ÄÏÉâ Í∏∞Îä• */}
      {showSearch && (
        <Box sx={{ mb: 2 }}>
          <Autocomplete
            freeSolo
            options={searchResults}
            getOptionLabel={(option) => typeof option === 'string' ? option : option.name}
            inputValue={searchTerm}
            onInputChange={handleSearchChange}
            onChange={handleSearchSelect}
            renderInput={(params) => (
              <TextField
                {...params}
                placeholder="ÏßÄÏó≠Î™ÖÏùÑ Í≤ÄÏÉâÌïòÏÑ∏Ïöî..."
                size="small"
                InputProps={{
                  ...params.InputProps,
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon fontSize="small" />
                    </InputAdornment>
                  ),
                }}
              />
            )}
            renderOption={(props, option) => (
              <Box component="li" {...props}>
                <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                  <Typography variant="body2" sx={{ mr: 1 }}>
                    {getCityIcon(option.type)}
                  </Typography>
                  <Box>
                    <Typography variant="body2">
                      {option.name}
                    </Typography>
                    {option.parentName && (
                      <Typography variant="caption" color="text.secondary">
                        {option.parentName}
                      </Typography>
                    )}
                  </Box>
                </Box>
              </Box>
            )}
            noOptionsText="Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§"
            sx={{ mb: 1 }}
          />
        </Box>
      )}

      {/* ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏßÄÏó≠ ÌëúÏãú */}
      {value && (
        <Box sx={{ mb: 2 }}>
          <Chip
            icon={<LocationIcon />}
            label={`ÏÑ†ÌÉùÎêú ÏßÄÏó≠: ${value}`}
            onDelete={() => handleRegionSelect('')}
            color="primary"
            variant="outlined"
          />
        </Box>
      )}

      {/* Ìä∏Î¶¨ Íµ¨Ï°∞ ÏßÄÏó≠ ÏÑ†ÌÉù */}
      <Paper 
        elevation={1} 
        sx={{ 
          maxHeight, 
          overflow: 'auto',
          border: '1px solid',
          borderColor: 'divider'
        }}
      >
        {/* Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÏòµÏÖò */}
        <ListItem>
          <ListItemButton onClick={() => handleRegionSelect('')}>
            <ListItemText 
              primary={
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <MyLocationIcon sx={{ mr: 1, fontSize: 20 }} />
                  <Typography variant="body2" fontWeight="medium">
                    Ï†ÑÍµ≠ Ï†ÑÏ≤¥
                  </Typography>
                </Box>
              }
            />
          </ListItemButton>
        </ListItem>
        
        <Divider />

        {/* Ïãú/ÎèÑÎ≥Ñ Ìä∏Î¶¨ */}
        {Object.entries(regionsData).map(([provinceKey, province]) => (
          <Accordion
            key={provinceKey}
            expanded={expandedProvinces.has(provinceKey)}
            onChange={() => handleAccordionToggle(provinceKey)}
            elevation={0}
            sx={{ 
              '&:before': { display: 'none' },
              '&.Mui-expanded': { margin: 0 }
            }}
          >
            <AccordionSummary 
              expandIcon={<ExpandMoreIcon />}
              sx={{ 
                minHeight: 48,
                '&.Mui-expanded': { minHeight: 48 }
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                <Typography variant="body2" sx={{ mr: 1 }}>
                  {getProvinceIcon(province.type)}
                </Typography>
                <Typography variant="body1" fontWeight="medium">
                  {province.name}
                </Typography>
                <Typography variant="caption" color="text.secondary" sx={{ ml: 'auto', mr: 2 }}>
                  {Object.keys(province.children).length}Í∞ú ÏßÄÏó≠
                </Typography>
              </Box>
            </AccordionSummary>
            
            <AccordionDetails sx={{ p: 0 }}>
              {/* Ïãú/ÎèÑ Ï†ÑÏ≤¥ ÏÑ†ÌÉù */}
              <ListItem sx={{ pl: 4 }}>
                <ListItemButton 
                  onClick={() => handleRegionSelect(province.name)}
                  sx={{ borderRadius: 1 }}
                >
                  <ListItemText 
                    primary={
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Typography variant="body2" sx={{ mr: 1 }}>
                          üåç
                        </Typography>
                        <Typography variant="body2" color="primary">
                          {province.name} Ï†ÑÏ≤¥
                        </Typography>
                      </Box>
                    }
                  />
                </ListItemButton>
              </ListItem>
              
              <Divider sx={{ ml: 4, mr: 2 }} />
              
              {/* Ïãú/Íµ∞/Íµ¨ Î™©Î°ù */}
              {Object.entries(province.children).map(([cityKey, city]) => (
                <ListItem key={cityKey} sx={{ pl: 4 }}>
                  <ListItemButton 
                    onClick={() => handleRegionSelect(city.name, city.coords)}
                    sx={{ borderRadius: 1 }}
                  >
                    <ListItemText 
                      primary={
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Typography variant="body2" sx={{ mr: 1 }}>
                            {getCityIcon(city.type)}
                          </Typography>
                          <Typography variant="body2">
                            {city.name}
                          </Typography>
                        </Box>
                      }
                    />
                  </ListItemButton>
                </ListItem>
              ))}
            </AccordionDetails>
          </Accordion>
        ))}
      </Paper>
    </Box>
  );
};

export default RegionTreeSelect;