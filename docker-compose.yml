version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:14-3.2
    container_name: real_estate_postgres
    environment:
      POSTGRES_DB: real_estate_platform
      POSTGRES_USER: ${POSTGRES_USER:-real_estate_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-real_estate_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schemas:/docker-entrypoint-initdb.d
    networks:
      - real_estate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-real_estate_user} -d real_estate_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: real_estate_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./database/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - real_estate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: real_estate_backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-real_estate_user}:${POSTGRES_PASSWORD:-real_estate_password}@postgres:5432/real_estate_platform
      - REDIS_URL=redis://redis:6379
      - PORT=4000
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - real_estate_network
    restart: unless-stopped
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: real_estate_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:4000
      - REACT_APP_KAKAO_API_KEY=${KAKAO_JAVASCRIPT_KEY}
      - PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - real_estate_network
    restart: unless-stopped
    command: npm start

  # Nginx (Production용 - 개발 시에는 주석 처리)
  # nginx:
  #   image: nginx:alpine
  #   container_name: real_estate_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./deployment/nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - real_estate_network
  #   restart: unless-stopped

  # 크롤링 서비스 (백그라운드 작업)
  crawler:
    build:
      context: ./backend
      dockerfile: Dockerfile.crawler
    container_name: real_estate_crawler
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-real_estate_user}:${POSTGRES_PASSWORD:-real_estate_password}@postgres:5432/real_estate_platform
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./crawl-data:/app/crawl-data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - real_estate_network
    restart: unless-stopped
    command: npm run crawl:start

  # 모니터링 - Prometheus (선택사항)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: real_estate_prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - real_estate_network
  #   restart: unless-stopped

  # 모니터링 - Grafana (선택사항)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: real_estate_grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana:/etc/grafana/provisioning
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - real_estate_network
  #   restart: unless-stopped

networks:
  real_estate_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local