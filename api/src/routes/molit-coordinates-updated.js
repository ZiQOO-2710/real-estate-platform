/**
 * ÏóÖÎç∞Ïù¥Ìä∏Îêú Íµ≠ÌÜ†Î∂Ä Ïã§Í±∞ÎûòÍ∞Ä Ï¢åÌëú API
 * - apt_master_infoÏóêÏÑú Îß§Ïπ≠Îêú Ï†ïÌôïÌïú Ï¢åÌëú ÏÇ¨Ïö©
 * - 97ÎßåÍ±¥ Ïã§Í±∞ÎûòÍ∞Ä + Ï†ïÌôïÌïú Ï¢åÌëú Îç∞Ïù¥ÌÑ∞
 */

const express = require('express')
const sqlite3 = require('sqlite3').verbose()
const path = require('path')

const router = express.Router()

/**
 * GET /api/molit-coordinates-updated/
 * Ï†ïÌôïÌïú Ï¢åÌëúÍ∞Ä Îß§Ïπ≠Îêú Íµ≠ÌÜ†Î∂Ä Ïã§Í±∞ÎûòÍ∞Ä Îç∞Ïù¥ÌÑ∞
 */
router.get('/', async (req, res) => {
  try {
    const {
      region = '',
      sigungu = '',
      dong = '',
      limit = 500,
      minPrice = 0,
      maxPrice = 999999,
      dealType = '',
      year = ''
    } = req.query

    console.log('üéØ Ï†ïÌôïÌïú Ï¢åÌëú MOLIT API Ìò∏Ï∂ú:', { region, sigungu, dong, limit, minPrice, maxPrice, dealType, year })

    const startTime = Date.now()
    
    // Ï¢åÌëúÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏Îêú MOLIT DB Ïó∞Í≤∞
    const molitDbPath = '/Users/seongjunkim/projects/real-estate-platform/molit_complete_data.db'
    
    const results = await new Promise((resolve, reject) => {
      const db = new sqlite3.Database(molitDbPath, (err) => {
        if (err) {
          console.error('MOLIT DB Ïó∞Í≤∞ Ïã§Ìå®:', err.message)
          reject(err)
          return
        }
        
        // ÌïÑÌÑ∞ Ï°∞Í±¥ Íµ¨ÏÑ±
        let whereConditions = ['longitude IS NOT NULL', 'latitude IS NOT NULL']
        const params = []
        
        // ÏßÄÏó≠ ÌïÑÌÑ∞
        if (region) {
          whereConditions.push('region_name LIKE ?')
          params.push(`%${region}%`)
        }
        
        if (sigungu) {
          whereConditions.push('(region_name LIKE ? OR json_extract(api_data, "$.sggNm") LIKE ?)')
          params.push(`%${sigungu}%`, `%${sigungu}%`)
        }
        
        if (dong) {
          whereConditions.push('json_extract(api_data, "$.umdNm") LIKE ?')
          params.push(`%${dong}%`)
        }
        
        // Í±∞Îûò Ïú†Ìòï ÌïÑÌÑ∞
        if (dealType) {
          whereConditions.push('deal_type = ?')
          params.push(dealType)
        }
        
        // Í±∞Îûò ÎÖÑÎèÑ ÌïÑÌÑ∞
        if (year) {
          whereConditions.push('json_extract(api_data, "$.dealYear") = ?')
          params.push(year)
        }
        
        // Í∞ÄÍ≤© ÌïÑÌÑ∞ (API Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ï∂îÏ∂ú)
        if (minPrice > 0) {
          whereConditions.push('CAST(json_extract(api_data, "$.dealAmount") AS INTEGER) >= ?')
          params.push(minPrice)
        }
        
        if (maxPrice < 999999) {
          whereConditions.push('CAST(json_extract(api_data, "$.dealAmount") AS INTEGER) <= ?')
          params.push(maxPrice)
        }
        
        // Ï†ïÌôïÌïú Ï¢åÌëúÍ∞Ä ÏûàÎäî Îç∞Ïù¥ÌÑ∞Îßå Ï°∞ÌöåÌïòÎäî ÏøºÎ¶¨
        const query = `
          SELECT 
            apartment_name,
            longitude,
            latitude,
            coordinate_source,
            json_extract(api_data, '$.aptNm') as original_apt_name,
            json_extract(api_data, '$.dealAmount') as deal_amount,
            json_extract(api_data, '$.dealYear') as deal_year,
            json_extract(api_data, '$.dealMonth') as deal_month,
            json_extract(api_data, '$.dealDay') as deal_day,
            json_extract(api_data, '$.area') as area,
            json_extract(api_data, '$.floor') as floor,
            json_extract(api_data, '$.buildYear') as build_year,
            json_extract(api_data, '$.umdNm') as dong_name,
            json_extract(api_data, '$.sggNm') as sigungu_name,
            deal_type,
            region_name,
            json_extract(api_data, '$.jibun') as jibun,
            json_extract(api_data, '$.roadNm') as road_name,
            json_extract(api_data, '$.roadNmSggCd') as road_code,
            json_extract(api_data, '$.rgstDate') as register_date
          FROM apartment_transactions 
          WHERE ${whereConditions.join(' AND ')}
          ORDER BY 
            json_extract(api_data, '$.dealYear') DESC,
            json_extract(api_data, '$.dealMonth') DESC,
            json_extract(api_data, '$.dealDay') DESC
          LIMIT ?
        `
        
        params.push(parseInt(limit))
        
        console.log('üîç Ïã§Ìñâ ÏøºÎ¶¨:', query.substring(0, 200) + '...')
        console.log('üìã ÌååÎùºÎØ∏ÌÑ∞:', params)
        
        db.all(query, params, (err, rows) => {
          db.close()
          
          if (err) {
            console.error('ÏøºÎ¶¨ Ïã§Ìñâ Ïò§Î•ò:', err.message)
            reject(err)
            return
          }
          
          // Îç∞Ïù¥ÌÑ∞ ÌõÑÏ≤òÎ¶¨
          const processedData = rows.map(row => ({
            // Í∏∞Î≥∏ Ï†ïÎ≥¥
            apartment_name: row.apartment_name || row.original_apt_name,
            original_apt_name: row.original_apt_name,
            
            // Ï†ïÌôïÌïú Ï¢åÌëú (apt_master_infoÏóêÏÑú Îß§Ïπ≠Îê®)
            longitude: parseFloat(row.longitude),
            latitude: parseFloat(row.latitude),
            coordinate_source: row.coordinate_source,
            
            // Í±∞Îûò Ï†ïÎ≥¥
            deal_amount: parseInt(row.deal_amount) || 0,
            deal_date: `${row.deal_year}-${String(row.deal_month).padStart(2, '0')}-${String(row.deal_day).padStart(2, '0')}`,
            deal_year: parseInt(row.deal_year),
            deal_month: parseInt(row.deal_month),
            deal_day: parseInt(row.deal_day),
            deal_type: row.deal_type,
            
            // Î∂ÄÎèôÏÇ∞ Ï†ïÎ≥¥
            area: parseFloat(row.area) || 0,
            floor: parseInt(row.floor) || 0,
            build_year: parseInt(row.build_year) || 0,
            
            // ÏúÑÏπò Ï†ïÎ≥¥
            region_name: row.region_name,
            sigungu_name: row.sigungu_name,
            dong_name: row.dong_name,
            jibun: row.jibun,
            road_name: row.road_name,
            road_code: row.road_code,
            
            // Í∏∞ÌÉÄ
            register_date: row.register_date
          }))
          
          resolve(processedData)
        })
      })
    })

    const endTime = Date.now()
    const responseTime = endTime - startTime

    console.log(`‚úÖ Ï†ïÌôïÌïú Ï¢åÌëú MOLIT Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏôÑÎ£å: ${results.length}Í∞ú (${responseTime}ms)`)

    res.json({
      success: true,
      data: results,
      total: results.length,
      filters: {
        region,
        sigungu,
        dong,
        dealType,
        year,
        minPrice,
        maxPrice
      },
      response_time_ms: responseTime,
      coordinate_source: 'apt_master_info',
      note: 'Ï†ïÌôïÌïú Ï¢åÌëúÍ∞Ä Îß§Ïπ≠Îêú Íµ≠ÌÜ†Î∂Ä Ïã§Í±∞ÎûòÍ∞Ä Îç∞Ïù¥ÌÑ∞'
    })

  } catch (error) {
    console.error('‚ùå Ï†ïÌôïÌïú Ï¢åÌëú MOLIT API Ïò§Î•ò:', error)
    res.status(500).json({
      success: false,
      error: 'Ï†ïÌôïÌïú Ï¢åÌëú MOLIT Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®',
      message: error.message
    })
  }
})

/**
 * GET /api/molit-coordinates-updated/summary
 * Ï¢åÌëú Îß§Ïπ≠ ÏÉÅÌÉú ÏöîÏïΩ
 */
router.get('/summary', async (req, res) => {
  try {
    console.log('üìä Ï¢åÌëú Îß§Ïπ≠ ÏöîÏïΩ Ï†ïÎ≥¥ Ï°∞Ìöå')
    
    const molitDbPath = '/Users/seongjunkim/projects/real-estate-platform/molit_complete_data.db'
    
    const summary = await new Promise((resolve, reject) => {
      const db = new sqlite3.Database(molitDbPath, (err) => {
        if (err) {
          reject(err)
          return
        }
        
        const queries = [
          // Ï†ÑÏ≤¥ Î†àÏΩîÎìú Ïàò
          'SELECT COUNT(*) as total FROM apartment_transactions',
          
          // Ï¢åÌëúÍ∞Ä ÏûàÎäî Î†àÏΩîÎìú Ïàò
          'SELECT COUNT(*) as with_coordinates FROM apartment_transactions WHERE longitude IS NOT NULL AND latitude IS NOT NULL',
          
          // Ï¢åÌëú Ï∂úÏ≤òÎ≥Ñ ÌÜµÍ≥Ñ
          'SELECT coordinate_source, COUNT(*) as count FROM apartment_transactions WHERE coordinate_source IS NOT NULL GROUP BY coordinate_source',
          
          // ÏÉÅÏúÑ ÏïÑÌååÌä∏Î≥Ñ Í±∞ÎûòÎüâ
          `SELECT 
            apartment_name, 
            COUNT(*) as transaction_count,
            AVG(CAST(json_extract(api_data, '$.dealAmount') AS INTEGER)) as avg_price
           FROM apartment_transactions 
           WHERE longitude IS NOT NULL 
           GROUP BY apartment_name 
           ORDER BY transaction_count DESC 
           LIMIT 10`,
           
          // ÏßÄÏó≠Î≥Ñ Îß§Ïπ≠ ÌòÑÌô©
          `SELECT 
            region_name,
            COUNT(*) as total_transactions,
            COUNT(CASE WHEN longitude IS NOT NULL THEN 1 END) as matched_coordinates,
            ROUND(COUNT(CASE WHEN longitude IS NOT NULL THEN 1 END) * 100.0 / COUNT(*), 2) as match_rate
           FROM apartment_transactions 
           GROUP BY region_name 
           ORDER BY total_transactions DESC 
           LIMIT 10`
        ]
        
        Promise.all(queries.map(query => new Promise((resolve, reject) => {
          db.all(query, [], (err, rows) => {
            if (err) reject(err)
            else resolve(rows)
          })
        }))).then(results => {
          db.close()
          
          const [totalResult, coordinatesResult, sourcesResult, topApartmentsResult, regionsResult] = results
          
          resolve({
            total_records: totalResult[0].total,
            records_with_coordinates: coordinatesResult[0].with_coordinates,
            match_rate: ((coordinatesResult[0].with_coordinates / totalResult[0].total) * 100).toFixed(2),
            coordinate_sources: sourcesResult,
            top_apartments: topApartmentsResult,
            regions_summary: regionsResult
          })
        }).catch(reject)
      })
    })

    res.json({
      success: true,
      summary,
      updated_at: new Date().toISOString()
    })

  } catch (error) {
    console.error('‚ùå Ï¢åÌëú Îß§Ïπ≠ ÏöîÏïΩ Ï°∞Ìöå Ïò§Î•ò:', error)
    res.status(500).json({
      success: false,
      error: 'ÏöîÏïΩ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®',
      message: error.message
    })
  }
})

module.exports = router